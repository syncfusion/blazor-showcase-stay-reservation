@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Notifications
@using System.Globalization
@using StayReservation.Data
@using System;
@using Syncfusion.Blazor.Data;


<div class="schedule-container">
    @{
        if (IsScheduleLoaded)
        {
            if (Service.ScheduleRef != null)
            {
                ResourceCollection = Service.ScheduleRef.GetResourceCollections();
                if (ResourceCollection.Count < 2)
                {
                    Service.RenderSchedule = "hide-schedule";
                    Service.ShowNoSchedule = "";
                }
                else
                {
                    Service.RenderSchedule = "";
                    Service.ShowNoSchedule = "hide-no-schedule";
                }
            }
        }
    }
    @{
        string cssClass = string.Format("app-scheduler {0}", Service.RenderSchedule);
        <SfSchedule TValue="AppointmentData" Height="507px" @bind-SelectedDate="Service.CurrentDate" CssClass="@cssClass" @ref="Service.ScheduleRef" ShowHeaderBar="false" ShowQuickInfo="Service.Mobile ? true : false" EnableAutoRowHeight="true" AllowDragAndDrop="false" AllowResizing="false">
            <ScheduleTimeScale Enable="false"></ScheduleTimeScale>
            <ScheduleEvents TValue="AppointmentData" EventRendered="OnEventRendered" ActionCompleted="OnActionCompleted" OnActionBegin="OnActionBegin" OnRenderCell="OnCellRendered" OnPopupOpen="OnPopupOpen" Created="OnCreated" OnCellDoubleClick="CellDoubleClick" OnCellClick="CellClick" OnEventDoubleClick="EventDoubleClick"></ScheduleEvents>
            <ScheduleGroup Resources="Service.Resources" EnableCompactView="false"></ScheduleGroup>
            <ScheduleResources>
                <ScheduleResource TItem="ResourceData" TValue="int" Query="@Service.ResourceQuery" DataSource="Service.FloorData" Field="FloorId" Title="Floors" Name="Floors" TextField="FloorText" IdField="Id" ColorField="FloorColor" AllowMultiple="false"></ScheduleResource>
                <ScheduleResource TItem="ResourceData" TValue="int[]" Query="@Service.FilterQuery" DataSource="Service.RoomData" Field="RoomId" Title="Rooms" Name="Rooms" TextField="RoomText" IdField="Id" GroupIDField="RoomsId" ColorField="RoomColor" AllowMultiple="true"></ScheduleResource>
            </ScheduleResources>
            <ScheduleEventSettings DataSource=@Service.appointmentData IgnoreWhitespace="true">
                <Template>
                    <div class="template-wrap">
                        <div class='subject' style='color:#474747'> @((context as AppointmentData).Subject)</div>
                        <div class="image">
                            <svg width="12"
                                 height="12"
                                 viewBox="0 0 12 12"
                                 fill="none"
                                 xmlns="http://www.w3.org/2000/svg">
                                <g id="Frame">
                                    <path id="Vector"
                                          d="M5.25 10.5C5.25 10.5 4.5 10.5 4.5 9.75C4.5 9 5.25 6.75 8.25 6.75C11.25 6.75 12 9 12 9.75C12 10.5 11.25 10.5 11.25 10.5H5.25ZM8.25 6C8.84674 6 9.41903 5.76295 9.84099 5.34099C10.2629 4.91903 10.5 4.34674 10.5 3.75C10.5 3.15326 10.2629 2.58097 9.84099 2.15901C9.41903 1.73705 8.84674 1.5 8.25 1.5C7.65326 1.5 7.08097 1.73705 6.65901 2.15901C6.23705 2.58097 6 3.15326 6 3.75C6 4.34674 6.23705 4.91903 6.65901 5.34099C7.08097 5.76295 7.65326 6 8.25 6ZM3.912 10.5C3.80082 10.2659 3.74537 10.0092 3.75 9.75C3.75 8.73375 4.26 7.6875 5.202 6.96C4.73182 6.81513 4.24196 6.74428 3.75 6.75C0.75 6.75 0 9 0 9.75C0 10.5 0.75 10.5 0.75 10.5H3.912ZM3.375 6C3.87228 6 4.34919 5.80246 4.70083 5.45083C5.05246 5.09919 5.25 4.62228 5.25 4.125C5.25 3.62772 5.05246 3.15081 4.70083 2.79917C4.34919 2.44754 3.87228 2.25 3.375 2.25C2.87772 2.25 2.40081 2.44754 2.04917 2.79917C1.69754 3.15081 1.5 3.62772 1.5 4.125C1.5 4.62228 1.69754 5.09919 2.04917 5.45083C2.40081 5.80246 2.87772 6 3.375 6Z"
                                          fill="@((context as AppointmentData).BorderColor)" />
                                </g>
                            </svg>
                            &nbsp;
                            @{
                                int count = 0;
                                count = (context as AppointmentData).Children + (context as AppointmentData).Adults;
                            }
                            <span style="color:#343A40; margin-right: 4% ">
                                @count
                            </span>
                            &nbsp;
                            <span class="e-icons e-night">
                                <svg width="12"
                                     height="12"
                                     viewBox="0 0 12 12"
                                     fill="none"
                                     xmlns="http://www.w3.org/2000/svg">
                                    <g id="Frame">
                                        <path id="Vector"
                                              d="M4.5 0.208724C4.57321 0.297683 4.61806 0.406553 4.62876 0.521266C4.63945 0.635979 4.6155 0.751263 4.56 0.852224C4.12639 1.64833 3.89995 2.54069 3.9015 3.44722C3.9015 6.46297 6.36 8.90497 9.39 8.90497C9.78525 8.90497 10.17 8.86372 10.5398 8.78497C10.6531 8.76043 10.7712 8.76982 10.8792 8.81197C10.9872 8.85412 11.0805 8.92716 11.1473 9.02197C11.2177 9.12056 11.2537 9.23968 11.2495 9.3608C11.2453 9.48192 11.2012 9.59826 11.124 9.69172C10.5358 10.4143 9.79369 10.9965 8.95188 11.3959C8.11007 11.7952 7.18974 12.0017 6.258 12.0002C2.8005 12.0002 0 9.21472 0 5.78272C0 3.19972 1.5855 0.984224 3.843 0.0452239C3.95545 -0.00230223 4.08029 -0.0120568 4.19876 0.0174256C4.31723 0.046908 4.42294 0.114035 4.5 0.208724Z"
                                              fill="@((context as AppointmentData).BorderColor)" />
                                    </g>
                                </svg>
                                <span style=" color:#343A40">@((context as AppointmentData).Nights)</span>
                            </span>
                        </div>
                    </div>
                </Template>
            </ScheduleEventSettings>
            <ScheduleViews>
                <ScheduleView Option="View.TimelineMonth"></ScheduleView>
            </ScheduleViews>
            <ScheduleTemplates>
                <DateHeaderTemplate>
                    <div class="date-header">
                        <div class="date-header-text" style="display:flex; justify-content: center">
                            @context.Date.ToString("dd",CultureInfo.InvariantCulture)
                        </div>
                        <div class="date-header-text" style="display:flex; justify-content: center">
                            @context.Date.ToString("ddd",CultureInfo.InvariantCulture)
                        </div>
                    </div>
                </DateHeaderTemplate>
                <EditorTemplate>
                    <div class="custom-event-editor @((Service.Mobile) ? "e-device" : "")">
                        <div class="flex-prop">
                            <SfTextBox ID="guestName" FloatLabelType="FloatLabelType.Always" Placeholder="Guest Name *" @bind-Value="@((context as AppointmentData).Subject)"></SfTextBox>
                            <ValidationMessage For="()=>((context as AppointmentData).Subject)" />
                        </div>
                        <div class="flex-prop">
                            @{
                                if (UpdateStartTime)
                                {
                                    (context as AppointmentData).StartTime = (context as AppointmentData).StartTime.AddHours(12);
                                    (context as AppointmentData).EndTime = (context as AppointmentData).EndTime.AddHours(12);
                                    UpdateStartTime = false;
                                }
                            }
                            <SfDateTimePicker ID="checkIn" TValue="DateTime" Placeholder="Check In *" FloatLabelType="FloatLabelType.Always" @bind-Value="@((context as AppointmentData).StartTime)">
                                <DateTimePickerEvents TValue="DateTime" OnRenderDayCell="@DisableDate" ValueChange="@OnStartTimeValueChanged"></DateTimePickerEvents>
                            </SfDateTimePicker>
                        </div>
                        <div class="flex-prop">
                            <SfDropDownList TValue="int" TItem="ResourceData" Placeholder="Floors" DataSource="Service.FloorData" Query="@Service.ResourceQuery" FloatLabelType="FloatLabelType.Always" @bind-Value="@((context as AppointmentData).FloorId)">
                                <DropDownListEvents TItem="ResourceData" TValue="int" ValueChange="FloorDropDownChanged" />
                                <DropDownListFieldSettings Value="Id" Text="FloorText"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                        <div class="flex-prop">
                            @{
                                if (IsFloorDropDownChanged)
                                {
                                    (context as AppointmentData).RoomId = Service.RoomsDdlValue;
                                    IsFloorDropDownChanged = false;
                                }
                            }
                            <SfDropDownList TValue="int" TItem="ResourceData" Placeholder="Select Room" DataSource="Service.RoomData" Query="@Service.DropDownQuery" FloatLabelType="FloatLabelType.Always" @bind-Value="@((context as AppointmentData).RoomId)" @ref="Service.DropDownRef">
                                <DropDownListEvents TItem="ResourceData" TValue="int" ValueChange="RoomDropDownChanged" />
                                <DropDownListFieldSettings Value="Id" Text="RoomText"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                        <div class="flex-prop">
                            @{
                                TimeSpan differenceInDays = (context as AppointmentData).EndTime.Subtract((context as AppointmentData).StartTime);
                                int noOfDays = Convert.ToInt32(differenceInDays.TotalDays);
                                (context as AppointmentData).Price = (Service.RoomPrice * noOfDays).ToString();
                            }
                            <SfTextBox ID="roomPrice" FloatLabelType="FloatLabelType.Always" Placeholder="Price per night (USD) *" Enabled="false" @bind-Value="@((context as AppointmentData).Price)"></SfTextBox>
                        </div>
                        <div class="flex-prop">
                            @{
                                TimeSpan difference = (context as AppointmentData).EndTime.Subtract((context as AppointmentData).StartTime);
                                int totalDays = Convert.ToInt32(difference.TotalDays);
                                (context as AppointmentData).Nights = totalDays;
                            }
                            <SfNumericTextBox TValue="int" ID="nights" Placeholder="Nights *" FloatLabelType="FloatLabelType.Always"
                                          Enabled="false" Min="1" Max="9" @bind-Value="@((context as AppointmentData).Nights)"></SfNumericTextBox>
                        </div>
                        <div class="flex-prop">
                            <SfNumericTextBox TValue="int" ID="adults" Placeholder="Adults *" FloatLabelType="FloatLabelType.Always"
                                          Min="1" Max="30" @bind-Value="@((context as AppointmentData).Adults)"></SfNumericTextBox>
                        </div>
                        <div class="flex-prop">
                            <SfNumericTextBox TValue="int" ID="children" Placeholder="Children *" FloatLabelType="FloatLabelType.Always"
                                          Min="1" Max="10" @bind-Value="@((context as AppointmentData).Children)"></SfNumericTextBox>
                        </div>
                        <div class="flex-prop">
                            @{
                                if (IsStartTimeUpdated || IsintialLoad)
                                {
                                    if((context as AppointmentData).Id < 1)
                                    {
                                        (context as AppointmentData).EndTime = (context as AppointmentData).StartTime.AddDays(1);
                                        IsStartTimeUpdated = false;
                                        IsintialLoad = false;
                                    } 
                                    
                                }
                            }
                            <SfDateTimePicker ID="checkOut" Placeholder="Check Out *" FloatLabelType="FloatLabelType.Always" @bind-Value="@((context as AppointmentData).EndTime)">
                                <DateTimePickerEvents TValue="DateTime" OnRenderDayCell="@EndTimeDisableDate" ValueChange="@OnEndTimeValueChanged"></DateTimePickerEvents>
                            </SfDateTimePicker>
                        </div>
                        <div class="flex-prop">
                            <SfTextBox ID="purpose" FloatLabelType="FloatLabelType.Always" Placeholder="Purpose" @bind-Value="@((context as AppointmentData).Purpose)"></SfTextBox>
                            <ValidationMessage For="()=>((context as AppointmentData).Purpose)" />
                        </div>
                        <div class="flex-prop">
                            @{
                                if (IsProofDropDownChanged)
                                {
                                    (context as AppointmentData).Proof = Service.ProofDdlValue;
                                    IsProofDropDownChanged = false;
                                }

                            }
                            <SfDropDownList TValue="int" TItem="Proof" Placeholder="Select Proof" DataSource="@Proofs" FloatLabelType="FloatLabelType.Always" @bind-Value="@((context as AppointmentData).Proof)">
                                <DropDownListFieldSettings Value="ID" Text="Text"></DropDownListFieldSettings>
                                <DropDownListEvents TItem="Proof" TValue="int" ValueChange="ProofDropDownChanged" />
                            </SfDropDownList>
                            <ValidationMessage For="()=>((context as AppointmentData).Proof)" />
                        </div>
                        <div class="flex-prop">
                            <SfTextBox ID="proofNumber" FloatLabelType="FloatLabelType.Always" Placeholder="Proof Number" @bind-Value="@((context as AppointmentData).ProofNumber)"></SfTextBox>
                            <ValidationMessage For="()=>((context as AppointmentData).ProofNumber)" />
                        </div>
                        <div class="flex-prop">
                            <SfTextBox ID="email" FloatLabelType="FloatLabelType.Always" Placeholder="Email" @bind-Value="@((context as AppointmentData).Email)"></SfTextBox>
                            <ValidationMessage For="()=>((context as AppointmentData).Email)" />
                        </div>
                        <div class="flex-prop">
                            <SfTextBox ID="contactNumber" FloatLabelType="FloatLabelType.Always" Placeholder="Contact Number" @bind-Value="@((context as AppointmentData).Phone)"></SfTextBox>
                            <ValidationMessage For="()=>((context as AppointmentData).Phone)" />
                        </div>
                    </div>
                </EditorTemplate>
                <CellTemplate>
                    @if ((ElementType)(context as TemplateContext).Type == ElementType.MonthCells)
                    {
                        <div class="template-wrap">
                            <span class="price-tag">$@GetRoomPrice((context as TemplateContext)?.GroupIndex ?? 0)</span>
                        </div>
                    }
                </CellTemplate>
                <ResourceHeaderTemplate>
                    @{
                        var resourceData = (context as TemplateContext).ResourceData as ResourceData;
                        <div class='template-wrap'>
                            <div class="resource-details">
                                <div class="resource-name">@(resourceData.FloorText)</div>
                            </div>
                            <div class="room-details">
                                <div class="resource-room">@(resourceData.RoomText)</div>
                                <div class="resource-description">@(resourceData.Description)</div>
                            </div>
                        </div>
                    }
                </ResourceHeaderTemplate>
            </ScheduleTemplates>
        </SfSchedule>
        <SfToast ID="toast_default" @ref="Service.ToastObj" Content="@Service.ToastContent" Timeout="5000" Icon="e-meeting" ShowCloseButton="true" Height="70px" Width="400px">
            <ToastPosition X="@Service.ToastPositionXValue" Y="@Service.ToastPositionYValue"></ToastPosition>
        </SfToast>
        <div class="@Service.ShowNoSchedule">
            <div class="no-schedule">
                <strong style="font-size:16px">
                    No properties found
                </strong>
                <p style="font-size:14px">
                    There are no matching properties for your search criteria. Try
                    updating your search.
                </p>
            </div>
        </div>
    }
</div>

@code {
    [Inject]
    public AppointmentService Service { get; set; }
    public bool IsScheduleLoaded { get; set; }
    public bool IsintialLoad { get; set; }
    public bool IsStartTimeUpdated { get; set; }
    public bool UpdateStartTime { get; set; }
    public bool IsCellDoubleClick { get; set; }
    public bool IsFloorDropDownChanged { get; set; }
    public bool IsProofDropDownChanged { get; set; } = true;
    private List<Resource> ResourceCollection { get; set; } = new List<Resource>();
    public string[] PastCells = { "past-cell" };
    public string[] ReadOnly = { "e-read-only" };
    internal void StateChanged()
    {
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Service.SchedulerPageRef = this;
    }

    public void OnCreated()
    {
        IsScheduleLoaded = true;
        Service.Hide = "sb-hide";
        Service.Visible = "visible";
        Service.Opacity = "1";
        Service.IndexPageRef.StateChanged();

    }

    public void FloorDropDownChanged(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, ResourceData> args)
    {
        IsFloorDropDownChanged = true;
        Service.DropDownQuery = new Query().Where("RoomsId", "equal", args.Value);
        var datasource = Service.DropDownRef.DataSource as List<ResourceData>;
        for (int i = 0; i < datasource.Count - 1; i++)
        {
            if (datasource[i].RoomsId == args.Value)
            {
                Service.RoomsDdlValue = datasource[i].Id;
                break;
            }
        }
    }

    public void RoomDropDownChanged(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, ResourceData> args)
    {
        Service.RoomsDdlValue = args.Value;
        int currentGroupIndex = Service.ScheduleRef.GetGroupIndex(args.Value, "Rooms");
        Service.RoomPrice = GetRoomPrice(currentGroupIndex);
    }

    public void ProofDropDownChanged(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, Proof> args)
    {
        IsProofDropDownChanged = true;
        Service.ProofDdlValue = args.Value;
    }

    public int GetRoomPrice(int index)
    {
        ResourceDetails<AppointmentData> resource = Service.ScheduleRef.GetResourceByIndex(index);
        int Price = 0;
        if (resource != null)
        {
            Price = Convert.ToInt32(resource.ResourceData.GetType().GetProperty("Price").GetValue(resource.ResourceData, null));

        }
        return Price;
    }

    public void OnEventRendered(EventRenderedArgs<AppointmentData> args)
    {
        int roomId = Convert.ToInt32(args.Data.RoomId);
        int floorId = Convert.ToInt32(args.Data.FloorId);
        string colorId = $"{roomId}_{floorId}";
        string borderColor = GetBorderColor(colorId);
        Dictionary<string, object> attributes = new Dictionary<string, object>();
        attributes.Add("style", $"border: 1px solid {borderColor}");
        DateTime date = Convert.ToDateTime(args.Data.StartTime);
        if (date < DateTime.Now.Date)
        {
            attributes.Add("class", "e-read-only");
        }
        args.Attributes = attributes;
        args.Data.BorderColor = borderColor;
    }

    private string GetBorderColor(string colorId)
    {
        if (Service.Mappings.ContainsKey(colorId))
        {
            return Service.Mappings[colorId];
        }
        else
        {
            return "#000000"; // Default border color
        }
    }

    public void OnActionCompleted(ActionEventArgs<AppointmentData> args)
    {
        if(args.AddedRecords != null)
        {
            if (args.AddedRecords.Count > 0 && IsCellDoubleClick)
            {
                args.AddedRecords[0].StartTime = args.AddedRecords[0].StartTime.AddHours(12);
                args.AddedRecords[0].EndTime = args.AddedRecords[0].EndTime.AddDays(-1).AddHours(12);
                IsCellDoubleClick = false;
            }
        }
        Service.ShowCalendar = false;
        Service.CalendarPageRef?.StateChanged();
        Service.ShowCalendar = true;
        Service.CalendarPageRef?.StateChanged();
        Service.SidebarPageRef?.StateChanged();
    }

    public async Task OnActionBegin(ActionEventArgs<AppointmentData> args)
    {
        bool availability = true;
        if (args.ActionType == ActionType.EventCreate || args.ActionType == ActionType.EventChange || args.ActionType == ActionType.EventRemove)
        {
            var records = args.AddedRecords ?? args.ChangedRecords ?? args.DeletedRecords;
            if (records == null)
            {
                return;
            }
            availability = await Service.ScheduleRef.IsSlotAvailableAsync(records.First());
            if (availability)
            {
                if (args.ActionType == ActionType.EventCreate)
                {
                    Service.ToastContent = "Reservation booked successfully";
                    Service.ToastObj.CssClass = "e-toast-success";
                    StateChanged();
                    await Service.ToastObj.ShowAsync();
                }
                else if (args.ActionType == ActionType.EventChange)
                {
                    Service.ToastContent = "Reservation updated successfully";
                    Service.ToastObj.CssClass = "e-toast-success";
                    StateChanged();
                    await Service.ToastObj.ShowAsync();
                }
                else if (args.ActionType == ActionType.EventRemove)
                {
                    Service.ToastContent = "Reservation removed successfully";
                    Service.ToastObj.Content= "Reservation removed successfully";
                    Service.ToastObj.CssClass = "e-toast-success";
                    StateChanged();
                    await Service.ToastObj.ShowAsync();
                }
            }
            else
            {
                Service.ToastContent = "Room not available for reservation on the selected Dates.";
                Service.ToastObj.CssClass = "e-toast-warning";
                StateChanged();
                await Service.ToastObj.ShowAsync();
            }
        }
        args.Cancel = !availability;
    }

    public void DisableDate(RenderDayCellEventArgs args)
    {
        if (args.Date < DateTime.Now.Date)
        {
            args.IsDisabled = true;
        }
    }

    public void EndTimeDisableDate(RenderDayCellEventArgs args)
    {
        if (args.Date < Service.DateTimePickerStartTime.Date)
        {
            args.IsDisabled = true;
        }
    }

    public void OnStartTimeValueChanged(ChangedEventArgs<DateTime> args)
    {
        IsStartTimeUpdated = true;
        Service.DateTimePickerStartTime = args.Value;
        Service.DateTimePickerEndTime = args.Value.AddDays(1);
    }

    public void OnEndTimeValueChanged(ChangedEventArgs<DateTime> args)
    {
        Service.DateTimePickerEndTime = args.Value;
    }

    public void OnCellRendered(RenderCellEventArgs args)
    {
        if (args.ElementType == ElementType.MonthCells)
        {
            DateTime date = Convert.ToDateTime(args.Date);
            if (date < DateTime.Now.Date)
            {
                args.CssClasses = new List<string>(PastCells);
            }

        }
    }

    public void OnPopupOpen(PopupOpenEventArgs<AppointmentData> args)
    {
        if (args.Type == PopupType.Editor)
        {
            IsintialLoad = true;
        }
        DateTime date = Convert.ToDateTime(args.Data.StartTime);
        if (date < DateTime.Now.Date)
        {
            args.Cancel = true;
        }
        if (args.Cancel) return;
    }

    public void CellDoubleClick(CellClickEventArgs args)
    {
        UpdateStartTime = true;
        IsCellDoubleClick = true;
        int groupIndex = args.GroupIndex;
        ResourceDetails<AppointmentData> resource = Service.ScheduleRef.GetResourceByIndex(groupIndex);
        int roomsId = Convert.ToInt32(resource.ResourceData.GetType().GetProperty("RoomsId").GetValue(resource.ResourceData, null));
        Service.DropDownQuery = new Query().Where("RoomsId", "equal", roomsId);
        IsProofDropDownChanged = true;
        Service.RoomPrice = GetRoomPrice(groupIndex);
        if(roomsId==0)
        {
            args.Cancel = true;
        } 
    }

    public void EventDoubleClick(EventClickArgs<AppointmentData> args)
    {
        int groupIndex = args.GroupIndex;
        ResourceDetails<AppointmentData> resource = Service.ScheduleRef.GetResourceByIndex(groupIndex);
        int roomsId = Convert.ToInt32(resource.ResourceData.GetType().GetProperty("RoomsId").GetValue(resource.ResourceData, null));
        Service.DropDownQuery = new Query().Where("RoomsId", "equal", roomsId);
    }

    public void CellClick(CellClickEventArgs args)
    {
        int groupIndex = args.GroupIndex;
        ResourceDetails<AppointmentData> resource = Service.ScheduleRef.GetResourceByIndex(groupIndex);
        int roomsId = Convert.ToInt32(resource.ResourceData.GetType().GetProperty("RoomsId").GetValue(resource.ResourceData, null));
        if (roomsId == 0)
        {
            args.Cancel = true;
        }
    }

    public class Proof
    {
        public int ID { get; set; }
        public string Text { get; set; }
    }
    List<Proof> Proofs = new List<Proof>
    {
        new Proof() { ID= 1, Text= "Licence" },
        new Proof() { ID= 2, Text= "Passport" }
    };

}
